From 89616d99edc0f76e5a2baa7975b25116609e8a7e Mon Sep 17 00:00:00 2001
From: Kyle Klein <kyletklein@gmail.com>
Date: Fri, 10 May 2013 21:43:56 -0700
Subject: [PATCH] Change post processing option from copy/move files upon
 finishing DL to also allow creating physical and symbolic links.

---
 .../interfaces/default/config_postProcessing.tmpl  | 26 ++++++--
 lib/linktastic/README.txt                          | 19 ++++++
 lib/linktastic/__init__.py                         |  0
 lib/linktastic/linktastic.py                       | 76 ++++++++++++++++++++++
 lib/linktastic/setup.py                            | 13 ++++
 sickbeard/__init__.py                              |  5 +-
 sickbeard/helpers.py                               | 20 ++++++
 sickbeard/postProcessor.py                         | 50 +++++++++++++-
 sickbeard/processTV.py                             |  7 +-
 sickbeard/webserve.py                              |  3 +-
 10 files changed, 207 insertions(+), 12 deletions(-)
 create mode 100644 lib/linktastic/README.txt
 create mode 100644 lib/linktastic/__init__.py
 create mode 100644 lib/linktastic/linktastic.py
 create mode 100644 lib/linktastic/setup.py

diff --git a/gui/slick/interfaces/default/config_postProcessing.tmpl b/gui/slick/interfaces/default/config_postProcessing.tmpl
index e2ec890..61eb4f5 100644
--- a/gui/slick/interfaces/default/config_postProcessing.tmpl
+++ b/gui/slick/interfaces/default/config_postProcessing.tmpl
@@ -59,13 +59,27 @@
                                 <span class="component-desc">Or if SABnzbd+ and Sick Beard are on different PCs.</span>
                             </label>
                         </div>
-
-                        
+       
                         <div class="field-pair">
-                            <input type="checkbox" name="keep_processed_dir" id="keep_processed_dir" #if $sickbeard.KEEP_PROCESSED_DIR == True then "checked=\"checked\"" else ""# />
-                            <label class="clearfix" for="keep_processed_dir">
-                                <span class="component-title">Keep Original Files</span>
-                                <span class="component-desc">Keep original files after they've been processed?</span>
+                            <label class="nocheck clearfix" for="process_method">
+                                <span class="component-title">Process Episode Method:</span>
+                                <span class="component-desc">
+                                    <select name="process_method" id="process_method" class="input-medium" >
+                                        #set $process_method_text = {'copy': "Copy", 'move': "Move", 'hardlink': "Physical Link", 'symlink' : "Symbolic Link"}
+                                        #for $curAction in ('copy', 'move', 'hardlink', 'symlink'):
+                                          #if $sickbeard.PROCESS_METHOD == $curAction:
+                                            #set $process_method = "selected=\"selected\""
+                                          #else
+                                            #set $process_method = ""
+                                          #end if
+                                        <option value="$curAction" $process_method>$process_method_text[$curAction]</option>
+                                        #end for
+                                    </select>                                
+                                </span>
+                            </label>
+                            <label class="nocheck clearfix">
+                                <span class="component-title">&nbsp;</span>
+                                <span class="component-desc">What method should be used to put the renamed file in the TV directory?</span>
                             </label>
                         </div>
 
diff --git a/lib/linktastic/README.txt b/lib/linktastic/README.txt
new file mode 100644
index 0000000..7fad24d
--- /dev/null
+++ b/lib/linktastic/README.txt
@@ -0,0 +1,19 @@
+Linktastic
+
+Linktastic is an extension of the os.link and os.symlink functionality provided
+by the python language since version 2.  Python only supports file linking on
+*NIX-based systems, even though it is relatively simple to engineer a solution
+to utilize NTFS's built-in linking functionality.  Linktastic attempts to unify
+linking on the windows platform with linking on *NIX-based systems.
+
+Usage
+
+Linktastic is a single python module and can be imported as such.  Examples:
+
+# Hard linking src to dest
+import linktastic
+linktastic.link(src, dest)
+
+# Symlinking src to dest
+import linktastic
+linktastic.symlink(src, dest)
diff --git a/lib/linktastic/__init__.py b/lib/linktastic/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/lib/linktastic/linktastic.py b/lib/linktastic/linktastic.py
new file mode 100644
index 0000000..7668766
--- /dev/null
+++ b/lib/linktastic/linktastic.py
@@ -0,0 +1,76 @@
+# Linktastic Module
+# - A python2/3 compatible module that can create hardlinks/symlinks on windows-based systems
+#
+# Linktastic is distributed under the MIT License.  The follow are the terms and conditions of using Linktastic.
+#
+# The MIT License (MIT)
+#  Copyright (c) 2012 Solipsis Development
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
+# associated documentation files (the "Software"), to deal in the Software without restriction,
+# including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
+# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
+# subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in all copies or substantial
+# portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
+# LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
+# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+import subprocess
+from subprocess import CalledProcessError
+import os
+
+
+# Prevent spaces from messing with us!
+def _escape_param(param):
+	return '"%s"' % param
+
+
+# Private function to create link on nt-based systems
+def _link_windows(src, dest):
+	try:
+		subprocess.check_output(
+			'cmd /C mklink /H %s %s' % (_escape_param(dest), _escape_param(src)),
+			stderr=subprocess.STDOUT)
+	except CalledProcessError as err:
+
+		raise IOError(err.output.decode('utf-8'))
+
+	# TODO, find out what kind of messages Windows sends us from mklink
+	# print(stdout)
+	# assume if they ret-coded 0 we're good
+
+
+def _symlink_windows(src, dest):
+	try:
+		subprocess.check_output(
+			'cmd /C mklink %s %s' % (_escape_param(dest), _escape_param(src)),
+			stderr=subprocess.STDOUT)
+	except CalledProcessError as err:
+		raise IOError(err.output.decode('utf-8'))
+
+	# TODO, find out what kind of messages Windows sends us from mklink
+	# print(stdout)
+	# assume if they ret-coded 0 we're good
+
+
+# Create a hard link to src named as dest
+# This version of link, unlike os.link, supports nt systems as well
+def link(src, dest):
+	if os.name == 'nt':
+		_link_windows(src, dest)
+	else:
+		os.link(src, dest)
+
+
+# Create a symlink to src named as dest, but don't fail if you're on nt
+def symlink(src, dest):
+	if os.name == 'nt':
+		_symlink_windows(src, dest)
+	else:
+		os.symlink(src, dest)
diff --git a/lib/linktastic/setup.py b/lib/linktastic/setup.py
new file mode 100644
index 0000000..e15cc2b
--- /dev/null
+++ b/lib/linktastic/setup.py
@@ -0,0 +1,13 @@
+from distutils.core import setup
+
+setup(
+	name='Linktastic',
+	version='0.1.0',
+	author='Jon "Berkona" Monroe',
+	author_email='solipsis.dev@gmail.com',
+	py_modules=['linktastic'],
+	url="http://github.com/berkona/linktastic",
+	license='MIT License - See http://opensource.org/licenses/MIT for details',
+	description='Truly platform-independent file linking',
+	long_description=open('README.txt').read(),
+)
diff --git a/sickbeard/__init__.py b/sickbeard/__init__.py
index b3327ab..71309dc 100644
--- a/sickbeard/__init__.py
+++ b/sickbeard/__init__.py
@@ -202,6 +202,7 @@
 RENAME_EPISODES = False
 PROCESS_AUTOMATICALLY = False
 KEEP_PROCESSED_DIR = False
+PROCESS_METHOD = None
 MOVE_ASSOCIATED_FILES = False
 TV_DOWNLOAD_DIR = None
 
@@ -440,7 +441,7 @@ def initialize(consoleLogging=True):
                 USE_NMA, NMA_NOTIFY_ONSNATCH, NMA_NOTIFY_ONDOWNLOAD, NMA_NOTIFY_ONSUBTITLEDOWNLOAD, NMA_API, NMA_PRIORITY, \
                 USE_PUSHALOT, PUSHALOT_NOTIFY_ONSNATCH, PUSHALOT_NOTIFY_ONDOWNLOAD, PUSHALOT_NOTIFY_ONSUBTITLEDOWNLOAD, PUSHALOT_AUTHORIZATIONTOKEN, \
                 NZBMATRIX_APIKEY, versionCheckScheduler, VERSION_NOTIFY, PROCESS_AUTOMATICALLY, \
-                KEEP_PROCESSED_DIR, TV_DOWNLOAD_DIR, TVDB_BASE_URL, MIN_SEARCH_FREQUENCY, \
+                KEEP_PROCESSED_DIR, PROCESS_METHOD, TV_DOWNLOAD_DIR, TVDB_BASE_URL, MIN_SEARCH_FREQUENCY, \
                 showQueueScheduler, searchQueueScheduler, ROOT_DIRS, CACHE_DIR, ACTUAL_CACHE_DIR, TVDB_API_PARMS, \
                 NAMING_PATTERN, NAMING_MULTI_EP, NAMING_FORCE_FOLDERS, NAMING_ABD_PATTERN, NAMING_CUSTOM_ABD, NAMING_STRIP_YEAR, \
                 RENAME_EPISODES, properFinderScheduler, PROVIDER_ORDER, autoPostProcesserScheduler, \
@@ -590,6 +591,7 @@ def initialize(consoleLogging=True):
         PROCESS_AUTOMATICALLY = check_setting_int(CFG, 'General', 'process_automatically', 0)
         RENAME_EPISODES = check_setting_int(CFG, 'General', 'rename_episodes', 1)
         KEEP_PROCESSED_DIR = check_setting_int(CFG, 'General', 'keep_processed_dir', 1)
+        PROCESS_METHOD = check_setting_str(CFG, 'General', 'process_method', 'copy' if KEEP_PROCESSED_DIR else 'move')
         MOVE_ASSOCIATED_FILES = check_setting_int(CFG, 'General', 'move_associated_files', 0)
         CREATE_MISSING_SHOW_DIRS = check_setting_int(CFG, 'General', 'create_missing_show_dirs', 0)
         ADD_SHOWS_WO_DIR = check_setting_int(CFG, 'General', 'add_shows_wo_dir', 0)
@@ -1244,6 +1246,7 @@ def save_config():
     new_config['General']['root_dirs'] = ROOT_DIRS if ROOT_DIRS else ''
     new_config['General']['tv_download_dir'] = TV_DOWNLOAD_DIR
     new_config['General']['keep_processed_dir'] = int(KEEP_PROCESSED_DIR)
+    new_config['General']['process_method'] = PROCESS_METHOD
     new_config['General']['move_associated_files'] = int(MOVE_ASSOCIATED_FILES)
     new_config['General']['process_automatically'] = int(PROCESS_AUTOMATICALLY)
     new_config['General']['rename_episodes'] = int(RENAME_EPISODES)
diff --git a/sickbeard/helpers.py b/sickbeard/helpers.py
index ce5ac1b..ea79163 100644
--- a/sickbeard/helpers.py
+++ b/sickbeard/helpers.py
@@ -40,6 +40,7 @@
 from sickbeard import encodingKludge as ek
 from sickbeard import notifiers
 
+from lib.linktastic import linktastic
 from lib.tvdb_api import tvdb_api, tvdb_exceptions
 
 import xml.etree.cElementTree as etree
@@ -479,6 +480,25 @@ def moveFile(srcFile, destFile):
         copyFile(srcFile, destFile)
         ek.ek(os.unlink, srcFile)
 
+def hardlinkFile(srcFile, destFile):
+    try:
+        ek.ek(linktastic.link, srcFile, destFile)
+        fixSetGroupID(destFile)
+    except OSError:
+        logger.log(u"Failed to create hardlink of " + srcFile + " at " + destFile + ". Copying instead", logger.ERROR)
+        copyFile(srcFile, destFile)
+        ek.ek(os.unlink, srcFile)
+
+def moveAndSymlinkFile(srcFile, destFile):
+    try:
+        ek.ek(os.rename, srcFile, destFile)
+        fixSetGroupID(destFile)
+        ek.ek(linktastic.symlink, destFile, srcFile)
+    except OSError:
+        logger.log(u"Failed to create symlink of " + srcFile + " at " + destFile + ". Copying instead", logger.ERROR)
+        copyFile(srcFile, destFile)
+        ek.ek(os.unlink, srcFile)
+
 def make_dirs(path):
     """
     Creates any folders that are missing and assigns them the permissions of their
diff --git a/sickbeard/postProcessor.py b/sickbeard/postProcessor.py
index b9c48f8..d7755fd 100644
--- a/sickbeard/postProcessor.py
+++ b/sickbeard/postProcessor.py
@@ -325,6 +325,45 @@ def _int_copy (cur_file_path, new_file_path):
 
         self._combined_file_operation(file_path, new_path, new_base_name, associated_files, action=_int_copy, subtitles=subtitles)
 
+
+    def _hardlink(self, file_path, new_path, new_base_name, associated_files=False, subtitles=False):
+        """
+        file_path: The full path of the media file to move
+        new_path: Destination path where we want to create a hard linked file
+        new_base_name: The base filename (no extension) to use during the link. Use None to keep the same name.
+        associated_files: Boolean, whether we should move similarly-named files too
+        """
+
+        def _int_hard_link(cur_file_path, new_file_path):
+
+            self._log(u"Hard linking file from " + cur_file_path + " to " + new_file_path, logger.DEBUG)
+            try:
+                helpers.hardlinkFile(cur_file_path, new_file_path)
+                helpers.chmodAsParent(new_file_path)
+            except (IOError, OSError), e:
+                self._log("Unable to link file " + cur_file_path + " to " + new_file_path + ": "+ex(e), logger.ERROR)
+                raise e
+        self._combined_file_operation(file_path, new_path, new_base_name, associated_files, action=_int_hard_link)
+
+    def _moveAndSymlink(self, file_path, new_path, new_base_name, associated_files=False, subtitles=False):
+        """
+        file_path: The full path of the media file to move
+        new_path: Destination path where we want to move the file to create a symbolic link to
+        new_base_name: The base filename (no extension) to use during the link. Use None to keep the same name.
+        associated_files: Boolean, whether we should move similarly-named files too
+        """
+
+        def _int_move_and_sym_link(cur_file_path, new_file_path):
+
+            self._log(u"Moving then symbolic linking file from " + cur_file_path + " to " + new_file_path, logger.DEBUG)
+            try:
+                helpers.moveAndSymlinkFile(cur_file_path, new_file_path)
+                helpers.chmodAsParent(new_file_path)
+            except (IOError, OSError), e:
+                self._log("Unable to link file " + cur_file_path + " to " + new_file_path + ": " + ex(e), logger.ERROR)
+                raise e
+        self._combined_file_operation(file_path, new_path, new_base_name, associated_files, action=_int_move_and_sym_link)
+
     def _history_lookup(self):
         """
         Look up the NZB name in the history and see if it contains a record for self.nzb_name
@@ -878,10 +917,17 @@ def process(self):
 
         try:
             # move the episode and associated files to the show dir
-            if sickbeard.KEEP_PROCESSED_DIR:
+            if sickbeard.PROCESS_METHOD == "copy":
                 self._copy(self.file_path, dest_path, new_base_name, sickbeard.MOVE_ASSOCIATED_FILES, sickbeard.USE_SUBTITLES and ep_obj.show.subtitles)
-            else:
+            elif sickbeard.PROCESS_METHOD == "move":
                 self._move(self.file_path, dest_path, new_base_name, sickbeard.MOVE_ASSOCIATED_FILES, sickbeard.USE_SUBTITLES and ep_obj.show.subtitles)
+            elif sickbeard.PROCESS_METHOD == "hardlink":
+              self._hardlink(self.file_path, dest_path, new_base_name, sickbeard.MOVE_ASSOCIATED_FILES, sickbeard.USE_SUBTITLES and ep_obj.show.subtitles)
+            elif sickbeard.PROCESS_METHOD == "symlink":
+              self._moveAndSymlink(self.file_path, dest_path, new_base_name, sickbeard.MOVE_ASSOCIATED_FILES, sickbeard.USE_SUBTITLES and ep_obj.show.subtitles)
+            else:
+              logger.log(u"Unknown process method: " + sickbeard.PROCESS_METHOD, logger.ERROR)
+              raise exceptions.PostProcessingFailed("Unable to move the files to their new home")
         except (OSError, IOError):
             raise exceptions.PostProcessingFailed("Unable to move the files to their new home")
 
diff --git a/sickbeard/processTV.py b/sickbeard/processTV.py
index 30218db..7d29344 100644
--- a/sickbeard/processTV.py
+++ b/sickbeard/processTV.py
@@ -117,6 +117,9 @@ def processDir (dirName, nzbName=None, recurse=False):
 
             videoFiles = filter(helpers.isMediaFile, fileList)
             notwantedFiles = [x for x in fileList if x not in videoFiles]
+            # Do not process video files in root directory a second time (copies and symbolic/physical links may remain).
+            if processPath == dirName:
+                videoFiles = []
 
             # If nzbName is set and there's more than one videofile in the folder, files will be lost (overwritten).
             if nzbName != None and len(videoFiles) >= 2:
@@ -147,7 +150,7 @@ def processDir (dirName, nzbName=None, recurse=False):
                     
             #Delete all file not needed
             for cur_file in notwantedFiles:
-                if sickbeard.KEEP_PROCESSED_DIR or not process_result:
+                if sickbeard.PROCESS_METHOD != "move" or not process_result:
                     break
 
                 cur_file_path = ek.ek(os.path.join, processPath, cur_file)
@@ -161,7 +164,7 @@ def processDir (dirName, nzbName=None, recurse=False):
 
                 returnStr += processor.log
 
-            if not sickbeard.KEEP_PROCESSED_DIR and \
+            if sickbeard.PROCESS_METHOD == "move" and \
             ek.ek(os.path.normpath, processPath) != ek.ek(os.path.normpath, sickbeard.TV_DOWNLOAD_DIR):
             
                 if not ek.ek(os.listdir, processPath) == []:
diff --git a/sickbeard/webserve.py b/sickbeard/webserve.py
index 540fb16..910166b 100644
--- a/sickbeard/webserve.py
+++ b/sickbeard/webserve.py
@@ -1069,7 +1069,7 @@ def index(self):
     @cherrypy.expose
     def savePostProcessing(self, naming_pattern=None, naming_multi_ep=None,
                     xbmc_data=None, mediabrowser_data=None, synology_data=None, sony_ps3_data=None, wdtv_data=None, tivo_data=None, mede8er_data=None,
-                    use_banner=None, keep_processed_dir=None, process_automatically=None, rename_episodes=None,
+                    use_banner=None, keep_processed_dir=None, process_method=None, process_automatically=None, rename_episodes=None,
                     move_associated_files=None, tv_download_dir=None, naming_custom_abd=None, naming_abd_pattern=None, naming_strip_year=None):
 
         results = []
@@ -1114,6 +1114,7 @@ def savePostProcessing(self, naming_pattern=None, naming_multi_ep=None,
 
         sickbeard.PROCESS_AUTOMATICALLY = process_automatically
         sickbeard.KEEP_PROCESSED_DIR = keep_processed_dir
+        sickbeard.PROCESS_METHOD = process_method
         sickbeard.RENAME_EPISODES = rename_episodes
         sickbeard.MOVE_ASSOCIATED_FILES = move_associated_files
         sickbeard.NAMING_CUSTOM_ABD = naming_custom_abd
-- 
1.8.1.6

